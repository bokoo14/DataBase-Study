# 10장 SQL

## SQL개요
SQL: 1974년 IBM연구소에서 System R이라는 관계형 DBMS를 연구할 때 관계형 대수와 관계형 해석을 기반으로 개발된 데이터 언어  
처음엔 SEQUEL이라 불렀음  
관계형 데이타베이스의 표준언어로써 상용 DBMS인 IBM DB2, MS-SQL/Server, ORACLE, MySQL, PostgreSQL 등과 같은 모든 주요 제품에서 채택되고 있다

## SQL의 특징
데이타 정의어(DDL), 데이타 조작어(DML), 데이타 제어어(DCL) 등 모든 기능 제공  
터미널을 통한 대화형(interactive) 질의어와 Java, Visual Basic, C, C++ 등과 같은 고급 프로그래밍 언어 내에 SQL이 삽입된 형태로 사용이 가능

----------------------------------------------------------------------------------
## 1. SQL 데이터 정의어
테이블을 생성하고 정의하거나 새로운 애트리뷰트를 추가/제거할 수 있다.  
또한 뷰 생성/제거, 인덱스 생성/제거를 할 수 있다.

## create table의 예
학번, 과목코드, 점수, 성적 4개의 애트리뷰트

- NOT NULL: 기본키와 같이 어떤 애트리뷰트의 값으로 NULL을 허용하지 않으려면 NOT NULL을 명시
- primary key: 기본키를 명세하는 것으로써 하나의 투플을 유일하게 식별할 수 있도록 중복된 값이 존재할 수 없음
- forien key: 외래키로서 참조 무결성을 유지하기 위한 것. 참조하고 있는 행이 삭제되거나 변경될 때 취해야 할 동작을 명시
- 이 동작에는 cascade, set null, set default, no action의 4가지 옵션을 지정할 수 있음
- check절: 한 애트리뷰트가 가질 수 있는 값들의 범위를 지정

----------------------------------------------------------------------------------
## 2. SQL 데이타 조작어
- 데이타 검색: select 열 from table where 조건;
  명확성을 위해 그 소속 테이블 이름과 열 이름이 구두점(.)으로 연결된 형태를 취하는 것이 원칙이다
  select 학생.학번, 학생.성명 from 학생 where 학생.학과="컴퓨터";

----------------------------------------------------------------------------------
## 데이타 검색
### SQL과 이론적 관계형 데이타 모델과의 차이점
- SQL은 질의 결과에서 똑같은 투플들을 자동으로 제거하지 않는다(정렬 연산은 시간이 길 수 있으므로)
- 그러므로, select 결과 테이블은 이론상의 투플집합은 아니다
- 이론적인 관계형 모델은 투플의 유일성으로 인해 두 개의 똑같은 투플들을 허용하지 않는다
- 따라서 사용자가 select문에 distinct를 명시적으로 작성할 때만 투플의 중복을 제거한다(default는 all)
- select all|distinct 열*리스트 from 테이블*리스트 where 조건 group by 열*리스트 having 조건 order by 열*리스트 asc|desc;

### 테이블 열 전부 검색
학생 테이블 전부를 검색하라
select * from 학생;

테이블 전체를 검색할 때는 열 이름을 일일이 전부 나열할 필요없이 \* 로 표현

### disctinct를 이용한 검색
학생 테이블에 어떤 학과들이 있는지 검색
select disctict 학과 from 학생;

### 조건 검색
과목 테이블에서 학점이 3이고 학년이 4인 과목코드와 과목명을 검색하라
select 과목코드, 과목명 from 과목 where 학점=3 and 학년=4;

### like를 이용하는 검색
과목코드가 'CO'로 시작하는 과목의 과목코드와 과목명을 검색하라
select 과목코드, 과목명 from 과목 where 과목코드 like 'CO%';

%는 패턴에 일치하는 모든 문자, \_ 는 패턴에 일치하는 하나의 문자

### NULL을 사용한 검색
강의 테이블에서 강의실이 NULL인 교수번호와 과목코드를 검색하라
select 교수번호, 과목코드 from 강의 where 강의실 is NULL;

### 범위 검색
수강 테이블에서 점수가 80점부터 90점 사이의 열들을 검색하라
select \* from 수강 where 점수 between 80 and 90;

### order by를 이용한 검색
사용자가 정렬된 형태로 결과를 보기 원할 경우 order by 키워드를 이용
오름차순(asc), 내림차순(desc)으로 결과 레코드 정렬

수강 테이블에서 점수가 80점 이상인 학생의 학번과 성적을 검색하되, 학번은 오름차순으로, 같은 학번에 대해서 성적은 내림차순으로 검색하라
select 학번, 성적 from 수강 where 성적>=80 order by 학번 asc, 성적 desc;

첫번째 속성 학번은 주(1차) 정렬, 두 번째 나오는 성적은 부(2차) 정렬키이다

### 계산된 열 검색(이름 변경)
간단한 계산식을 이용하여 데이터를 가져오는 경우, 가끔 열 이름이 보기에 불편하거나 이름이 없는 경우가 있다
이런 경우 별칭을 나타내는 as 사용

수강 테이블에서 과목코드 "CO123"에 수강한 학생의 학번과 점수에 2점을 더한 값을 검색하되, 학번의 열 이름은 "DB수강학번", 점수의 열 이름은 "수정점수", 그리고 그 사이에는 "최종점수="라는 텍스트 내용을 "내용"이라는 열 이름으로 디스플레이하라
select 학번 as DB수강학번, "최종점수=" as 내용, 점수+2 as 수정점수 from 수강 where 과목코드 = "CO123";

### 조인 검색
두 개 이상의 테이블로부터 데이터를 조인하는 복수 테이블 질의

과목코드 CO423에 수강한 학생의 성명, 학과, 성적을 검색하라
select 성명, 학과, 성적 from 학생, 수강 where 학생.학번=수강.학번 and 과목코드='CO423';

열 이름이 애매하게 되면 테이블 이름을 붙인 한정된 열 이름을 써야 한다(학생.학번, 수강.학번)
자연조인은 from절에 관련 테이블들을 여러개 명세하게 된다  
where절에 어떤 조건으로 조인하느냐를 표현하는 학생.학번=수강.학번을 꼭 작성해야 하는데, 이를 조인 조건 또는 조인 프레디킷(join predicate)이라 한다

### from 절에 별칭 사용
조인 질의에서 열 이름을 단순화하기 위해 from절에 별칭을 사용할 수 있음
이는 셀프 조인에서 명확한 열 참조를 가능하게 함
select 성명, 학과, 성적 from 학생 S, 수강 E where S.학번=E.학번 and 과목코드 = "CO423";

### 자기 자신의 테이블에 조인하는 검색(셀프 조인)
같은 학과 학생들의 학번들을 쌍으로 검색하라. 단 첫 번째 학번은 오름차순으로 정렬하라
select S1.학번, S2.학번 from 학생 S1, 학생 S2 where S1.학과=S2.학과 order by S1.학번;

### 집계 함수(aggregate function)를 이용한 검색
학생 테이블에서 학생 수를 구하라
select count(*) as 학생수 from 학생;

과목 "CO123"에 대한 점수의 평균을 구하라
select avg(점수) as 평균 from 수강 where 과목코드="CO123";

### group by를 이용한 검색
과목별 점수의 평균을 구하라
select 과목코드, avg(점수) as 평균 from 수강 group by 과목코드;

### having을 사용한 검색
2명 이상 수강한 과목에 대한 점수의 평균을 구하라
select 과목코드, avg(점수) as 평균 from 수강 group by 과목코드 having count(*)>=2;

### 중첩 질의문(nested query)을 사용한 검색
어떤 값들은 검색한 후에 이를 다시 비교 조건에서 사용하는 질의는 중첩 질의문을 사용하면 편리하게 표현할 수 있다
select의 where절 안에 "selct-from-where"형태를 취함
부속 질의문(sub-query)이라고도 하고, 중첩 질의문은 소괄호 안에 표기한다

중첩 질의문의 결과로는..
한 개의 단일 값이 반환되는 경우
한 개의 애트리뷰트로 이루어진 테이블이 반환되는 경우
여러 애트리뷰트들로 이루어진 테이블이 반환되는 경우

- 한 개의 단일 값이 반환되는 경우
학생 김철수와 같은 학과에 속하는 학생의 성명을 검색하라
select 성명 from 학생 where 학과 = (select 학과 from 학생 where 성명 = "김철수");
반환되는 결과는 '컴퓨터' 단일 값이다
이 값과 같은 학생의 성명은 김철수, 이영자, 박용철이 최종 검색된다

- 한 개의 애트리뷰트로 이루어진 테이블이 반환되는 경우
이런 경우 외부 질의문의 where절에는 in, any, all, exists와 같은 연산자가 사용된다
과목코드 'CO123'을 수강한 학생의 성명을 검색하라
select 성명 from 학생 where 학번 in (select 학번 from 수강 where 과목코드='CO123');
반환되는 결과는 20181234, 20182587, 20184652이다
한 애트리뷰트가 중첩 질의문 결과 값들의 집합에 속하는가를 테스트함

과목코드 'CO123'에 수강하지 않는 학생의 성명을 검색하라
select 성명 from 학생 where 학번 not in (select 학번 from 수강 where 과목코드='CO123');

- all, any, some과 같은 키워드를 where조건식에 사용될 수 있다
수강 테이블에서 학번 20181234의 점수보다 좋은 점수를 받은 학생의 학번과 과목코드를 검색하라
select 학번, 과목코드 from 수강 where 점수 > all (select 점수 from 수강 where 학번='20181234');

all은 왼쪽의 애트리뷰트 값이 오른쪽 값을 모두 만족해야 되는 and의 의미
any는 하나 이상 만족해도 되는 or의 의미

all과 any는 비교연산자와 결합하여 사용
= any는 in과 같은 의미
<> all은 not in과 같은 의미

- 여러 애트리뷰트들로 이루어진 테이블이 반환되는 경우
이런 경우 exists연산자를 사용하여 중첩 질의문의 결과가 빈테이블인지를 검사한다
중첩 질의문의 결과에 적어도 하나의 레코드가 들어있으면 참이 되고 그렇지 않으면 거짓이 된다

과목 'CO123'에 수강한 학생의 성명을 검색하라
select 성명 from 학생 where exists (select * from 수강 where 수강.학번=학생.학번 and 과목코드='CO123');
학생 테이블에서 성명을 검색하는데, 어떤 학생이냐 하면 과목 CO123을 수강하여 그 투플이 존재하는 그런 학생이다

- union이 관련된 검색
두 select문의 결과 테이블이 합병 가능해야 함

'컴퓨터'과 학생이거나 'EE123'에 수강한 학생의 학번을 검색하라
select 학번 from 학생 where 학과='컴퓨터' union select 학번 from 수강 where 과목코드='EE123';

합집합과 같으므로 결과에서 중복되는 투플들은 자동으로 제거됨

----------------------------------------------------------------------------------
## 삽입 (insert)
학번: 20188991, 성명: "오영주", 학과: "컴퓨터", 전화번호: "010-7652-7640"인 학생을 삽입하라
insert into 학생(학번, 성명, 학과, 전화번호) values(20188991, "오영주", "컴퓨터", "010-7652-7640");
insert into 학생 values(20188991, "오영주", "컴퓨터", "010-7652-7640");

- 한번에 여러 개의 투플들을 삽입
학생 테이블에서 '컴퓨터'과 학생의 학번, 성명, 전화번호를 검색하여 컴퓨터 테이블에 삽입하라
insert into 컴퓨터 select 학번, 성명, 전화번호 from 학생 where 학과='컴퓨터';

----------------------------------------------------------------------------------
## 삭제 (delete)
- 단일 레코드 삭제
학번 20181234인 학생을 삭제하라
delete from 학생 where 학번='20181234';

- 복수 레코드 삭제
학생 테이블의 모든 행을 삭제하라
delete from 학생;

- 중첩 질의문을 이용한 삭제
과목 CO123의 점수가 85점 이상인 '컴퓨터'과 학생을 수강테이블에서 삭제하라
delete from 수강 where 과목코드='CO123' and 점수>=85 and 수강.학번 in (select 학번 from 학생 where 학과='컴퓨터');

----------------------------------------------------------------------------------
## 갱신 (update)
- 단일 레코드 변경
성명이 '유진호'인 학생의 학과를 '컴퓨터'로 변경하라
update 학생 set 학과='컴퓨터' where 성명='유진호';

- 복수 레코드 변경
과목 'CO123'의 점수를 2점씩 증가시켜라
update 수강 set 점수=점수+2 where 과목코드='CO123';

- 중첩 질의문을 이용한 번경
'컴퓨터'과 학생의 점수를 2점씩 증가시켜라
update 수강 set 점수=점수+2 where 학번 in (select 학번 from 학생 where 학과='컴퓨터');

----------------------------------------------------------------------------------
## 3. SQL 뷰 (view)
하나 또는 둘 이상의 기본 테이블(base table)로부터 유도되어 만들어지는 가상 테이블(virtual table)

## 뷰의 생성
학생 테이블의 '컴퓨터'과 학생들로 구성된 학생뷰를 생성하라
create view 학생뷰(학번, 성명, 전화번호) as select 학번, 성명, 전화번호 from 학생 where 학과='컴퓨터' with check option;

뷰 생성은 "create view 뷰이름 as select as select문" 형태
with check option절은 이 뷰에 대한 갱신이나 삽입 연산 시 뷰 정의 조건인 학과='컴퓨터'를 위반하면 실행이 거절된다는 것을 기술

- 집계함수 사용 예
create view 학과별통계(학과, 학생수) as select 학과, count(*) from 학생 group by 학과;
두 번째 열은 집계함수로부터 유도되기 때문에 열의 이름을 상속받을 수 없음

- 두 개 이상의 테이블을 조인해서 뷰 정의
create view 우수학생(성명, 학과, 점수) as select 학생.성명, 학생.학과, 수강.점수 from 학생, 수강 where 학생.학변=수강.학번 and 수강.점수>=90;
create view birthdayview(lastname, firstname, [birth date]) as select lastname, firstname, birth_date from member, juvenile on member.member_no=juvenile.member_no;

## 뷰의 제거
### 일반 형식
drop view 뷰_이름 {restrict|cascade};
restrict: 이 뷰에 종속적인 뷰가 정의되지 않았을 때만 뷰를 삭제하도록 지시
cascade: 이 뷰뿐만 아니라 이 뷰에 종속적인 다른 모든 뷰나 제약 조건이 함께 제거

drop view 학과별통계 cascade;

### 뷰의 장단점
- 장점
관련된 데이터만 이용 가능 (중요하고 적합한 데이터만으로 구성 가능, 민감한 데이터에 대한 접근 금지(보안)가 가능)
데이터베이스 복잡성 해소 (복잡한 데이터베이스 구조를 숨길 수 있음, 복잡한 질의를 단순화 할 수 있음)
권한 부여를 단순화 함

- 단점
정의를 변경할 수 없음
삽입, 삭제, 갱신 연산에 제한이 많음

----------------------------------------------------------------------------------
## 4. 삽입 SQL
삽입 SQL은 이중모드(dual mode) 특성을 가지고 있다
: 터미널에서 대화식으로 사용할 수 있는 모든 SQL문은 응용 프로그램에서도 그대로 사용할 수 있는 특성을 뜻한다

삽입 SQL을 포함하는 응용 프로그램의 특징
: 명령문 앞에 EXEC SQL을 붙여 다른 명령문과 쉽게 구별 가능
호스트 변수는 begin declare와 end declare section문을 사용하여 선언
SQL문에서 사용되는 호스트 변수는 콜론(:)을 앞에 붙임
호스트 변수와 DB필드의 이름은 같아도 됨(호스트 변수는 콜론을 붙이기 때문)
호스트 변수와 대응하는 SQL열의 데이타 타입은 일치해야
SQLSTATE라는 호스트 변수를 포함, SQL문이 실행되면 실행 상태(성공, 실패, 오류)가 이 변수에 전달

- 응용 프로그램에 SQL 삽입 예
호스트 변수는 사용하기 전에 반드시 SQL 선언부인 begin declare section 속에서 선언되어야 함
exec sql begin declare section;
int sno;
char sname[21];
char dept[7];
char SQLSTATE[6];
exec sql end declare section;
sno=20181234;

exec sql selection 학번, 성명, 학과
into :sno, :sname, :sdept
from 학생
where 학번=:sno;
if (SQLSTATE='00000')
.. ... ;
else ... ;

- 단일 레코드 검색 (single SELECT)
where절을 만족하는 레코드가 오직 하나만 있을 때 그 레코드의 학번, 성명, 학과 값이 호스트 변수 sno, sname, sdept에 저장된다
exec sql select 학번, 성명, 학과 into :sno, :sname, :sdept from 학생 where 학번=:sno;

- 단일 레코드 갱신
학번 20183654 학생이 수강한 학생의 점수를 호스트 변수 x값만큼 증가시켜라
exec sql update 수강 set 점수=점수+:x where 학번=20183654;

- 복수 레코드 검색
여러 개의 레코드가 검색되는 삽입 SQL문
집합 속에 있는 레코드를 하나씩 접근하기 위해 커서(cursor)를 사용

declare cursor문은 뒤에 나오는 select문을 연결
select문은 cursor가 open될 때 실행
커서는 투플이 가리키는 포인터로 생각할 수 있다
cursor가 open될 때 select문이 실행됨
결과의 첫 번째 투플 이전을 커서가 가리키게 된다
fetch문은 커서를 다음 투플로 이동하게 함
DO ... END문 내에서 루프(loop) 수행
더 이상 레코드가 없으면 루프가 종료되고, close문에서 커서를 닫는다

exec sql declare cur cursor for
select 학번, 성명, 학과
from 학생
where 학과=:sdept;
exec sql open cur;
do
exec sql fetch cur into :sno, :sname, :sdept;
......
end;
exec sql close cur;

- 커서를 이용하는 데이터 조작
커서가 가리키는 특정 레코드 current of cur을 변경하거나 삭제하는 예
변경: exec sql update 학생 set 학과=:sdept where current of cur;
삭제: exec sql delete from 학생 where current of cur;

----------------------------------------------------------------------------------
## 5. 동적 SQL
- 온라인 애플리케이션의 수행과정
터미널로부터 명령문을 접수
입력된 명령문을 분석
데이타베이스에 대한 적절한 SQL문으로 지시
터미널에 메시지나 결과를 반환

이때, 입력 명령문이 상황에 따라 다른 경우 SQL문을 미리 만들어 두는 것이 불가능하게 된다
따라서 SQL문을 동적으로 작성할 수 있도록 지원하는 기능을 동적 SQL문이라 한다


가장 중요한 기본적인 명령: prepare, execute
prepare: 주어진 SQL문을 예비 컴파일하여 목적 코드를 생성하고 stSQL에 저장
execute: 저장되어 있는 stSQL의 SQL목적 코드를 실행
varchar staticSQL[256];
staticSQL="select * from 수강 where 과목코드='CO123' and 점수>=90";
exec sql prepare stSQL from :staticSQL;
exec SQL execute stSQL;


스트링으로 표현되는 staticSQL문에는 호스트변수를 사용 못함
그러나, 물음표(?)로 표현되는 매개변수는 사용 가능
Varchar dynamicSQL[256];
dynamicSQL="select * from 수강 where 과목코드=? and 점수>=?";
.........
exec sql prepare dySQL from :dynamciSQL;
.........
code='CO123';
score=90;
exec sql execute dySQL using :code, :score;
위의 dynamicSQL에는 2개의 물음표 매개변수가 포함되어 있다
물음표를 포함한 SQL문 실행을 위해 using절을 사용
호스트 변수 :code와 :score의 값이 select 문의 물음표 순서에 대응

- java에서의 SQL programming
public static void main (String[] args) 
{
Connection conn = null;
String url = "jdbc:mysql://localhost/academicDB"; //academicDB 사용 String id = "root";
String pass = "root";
Statement stmt = null;
ResultSet rs = null;
String query = "select * from student";
try {
conn = DriverManager.getConnection(url, id, pass); stmt = conn.createStatement();
rs = stmt.executeQuery(query);
while(rs.next()) {
System.out.println(rs.getInt(1) + ", " + rs.getString(2) ); }
rs.close(); stmt.close(); conn.close();
}
}


----------------------------------------------------------------------------------
[실습1]
#### 1 학생 테이블 전부를 검색하라
select * from student;

#### 2 학생 테이블에 어떤 학과들이 있는지 검색하라
select distinct sdept from student; 

#### 3 과목 테이블에서 학점이 3이고 학년이 4인 과목코드와 과목명을 검색하라
select code, cname from course where credit = "3" and year = "4";
 
#### 4 과목코드가 'CO'로 시작하는 과목의 콰목코드와 과목명을 검색하라
select code, cname from course where code like "CO%";

#### 5 강의 테이블에서 강의실이 NULL인 교수번호와 과목코드를 검색하라
select pno, code from lecture where room = null;

#### 6 수강테이블에서 점수가 80점부터 90점 사이의 열들을 검색하라
select * from enroll where score >= 80 and score <=90;

#### 7 수강 테이블에서 점수가 80점 이상인 학생의 학번과 성적을 검색하되, 학번은 오름차순으로, 같은 학번에 대해서 성적은 내림차순으로 검색하라
select sno, grade from enroll where score>=80 order by sno asc, grade desc;

#### 8 수강 테이블에서 과목코드 'CO123'에 수강한 학생의 학번과 점수에 2를 더한 값을 검색하되, 
#### 학번의 열 이름은 "DB수강학번", 점수의 열 이름은 "수정점수", 그리고 그 사이에 "최종점수="라는 텍스트 내용을 "내용"이라는 열 이름으로 디스플레이하라
select sno+2 as DB수강학번, "최종점수 = " as 내용, score+2 as 수정점수 from enroll where code = "CO123";

#### 9 과목번호 'CO423'에 수강한 학생의 성명, 학과, 성적을 검색하라
select sname, sdept, grade from student inner join enroll on student.sno = enroll.sno where code = "CO423";

#### 10 같은 학과 학생들의 학번을 쌍으로 검색하라. 단 첫 번째 학번은 오름차순으로 정렬하라
select s1.sno, s2.sno from student s1, student s2 where s1.sdept = s2.sdept order by s1.sno asc;

#### 11 학생 테이블에서 학생 수가 얼마인가를 검색하라
select count(*) as 학생수 from student;

#### 12 과목 'CO123'에 대한 점수의 평균은 얼마인가?
select avg(score) as 평균 from enroll where code="CO123";

#### 13 과목별 점수의 평균을 검색하라
select code, avg(score) as 평균 from enroll group by code; 

#### 14 2명 이상 수강한 과목에 대한 점수의 평균을 검색하라
select code, avg(score) as 평균 from enroll group by code having count(*)>=2; 

#### 15 학생 '김철수'와 같은 학과에 속하는 학생의 성명을 검색하라 (중첩 질의문 사용)
select sname from student where sdept=(select sdept from student where sname='김철수'); 

#### 16 과목코드 'CO123'을 수강한 학생의 성명을 검색하라 (중첩 질의문 사용)
select sname from student where sno in (select sno from enroll where code='CO123'); 

#### 17 과목코드 'CO123'에 수강하지 않은 학생의 성명을 검색하라 (중첩 질의문 사용)
select sname from student where sno not in (select sno from enroll where code='CO123'); 

#### 18 과목 'CO123' 에 수강한 학생의 성명을 검색하라 (exists문 사용)
select sname from student where exists (select * from enroll where enroll.sno=student.sno and code='CO123'); 

#### 19 '컴퓨터'과 학생이거나 또는 'EE123'에 수강한 학생의 학번을 검색하라 (union 키워드 사용)
select sno from student where sdept='컴퓨터' union select sno from enroll where code='EE123'; 
