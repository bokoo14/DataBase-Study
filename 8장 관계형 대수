# 8장 관계형 대수
## 관계형 대수
릴레이션을 처리하기 위한 연산자들의 집합

## 집합 연산자
합집합(UNION, ∪)
교집합(INTERSECT, ∩)
차집합(DIFFERENCE, -)
곱집합(CARTESIAN PRODUCT, ×)

## 순수 관계형 연산자
실렉트(SELECT)
프로젝트(PROJECT) 
조인(JOIN)
디비전(DIVISION, ÷)

## 집합 연산자 - 합집합, 교집합, 차집합, 곱집합
곱집합(카티션 프로덕트)를 제외하고는 피연산자인 두 릴레이션은 서로 합병가능해야 한다
- 합병 가능: 두 릴레이션 R과 S가 있을떄, 두 릴레이션의 *차수가 같고 대응되는 애트리뷰트의 *도메인이 같아야 한다 -> 합집합, 교집합, 차집합

1) 합집합 
|R∪S| ≤ |R| + |S|
2) 교집합
|R∩S| ≤ min{ |R|, |S|}
3) 차집합
|R-S| ≤ |R|
4) 곱집합(CARTESIAN PRODUCT)
카디널리티는 |R×S| = |R|×|S|
합병 가능할 필요 없음
차수 = (R차수) + (S차수)

합집합, 교집합, 곱집합 -> 결합적, 교환적

## 순수 관계형 연산자 - 실렉트, 프로젝트, 조인, 디비전
관계형 데이터베이스에 적용할 수 있도록 특별히 고안한 연산자들

1) 실렉트 = sigma 학과 = '컴퓨터' (학생) = R where 조건식
주어진 선택 조건을 만족시하는 *투플들을 선택하는 연산자
수평적 부분 집합을 찾는다
비교식/조건식,/프레디킷(predicate)을 만족하는 투플을 선택
2) 프로젝트 = pi 성명,학과(학생) = 
주어진 선택 조건을 만족하는 *애트리뷰트들을 선택하는 연산자
수직적 부분 집합을 찾음
릴레이션에 대한 수직적 연산
3) 조인 = 학생 join학번=학번 수강 = 
- 동일 조인: 조인 조건을 만족하는 모든 r과 s를 접합해서 만들어지는 투플로 된 릴레이션
  동일 조인의 문제점: 같은 애트리뷰트가 결과 릴레이션에 중복되게 나타남
- 자연 조인: 동일 조인의 결과에서 중복되는 애트리부트를 제거한 조인
4) 디비전 %
R의 차수가 (m+n)이고 S의 차수가 n이면 R÷S = (m+n) ÷ n = m의 차수가 된다
두 릴레이션의 공통 도메인 속성의 값이 서로 같은 m의 속성 값을 구하는 것

## 외부 합집합 other union ∪+
합병 가능하지 않은 두 릴레이션에 대해 모든 애트리뷰트가 포함되도록 확장된 형태의 릴레이션으로 만드는 것
애트리뷰트 값이 없을 때는 null값으로 채움

## 외부 조인 other join join+
한 릴레이션에 있는 투플이 조인할 상대 릴레이션에 대응되는 투플이 없을 경우, 상대를 null투플로 만들어 결과 릴레이션에 포함시키는 연산
- 왼쪽 외부 조인
- 오른쪽 외부 조인
- 완전 외부 조인: 두 조인 릴레이션의 투플들이 전부 결과 릴레이션에 포함됨

## 세미조인 R semijoin S
자연조인에 참여할 수 있는 R의 투플만을 선택하는 것
공통 애트리튜브로 S에 대해 프로젝트 수행
이 결과 릴레이션을 R릴레이션과 자연 조인을 수행
최종 결과로 세미 조인 결과를 얻을 수 있다

---------------------------------------------------------
실습
— database사용
create database test;
use test;

— select 문
select * from student;
select sname from student; — project
select sname, sdept from student;
select * from student where sdept = “컴퓨터”;  — select 
select * from course where credit >= 3;
select * from course where year = 2 or year = 3;
select * from course where credit = 3 and year = 3;

—join
: 두 개 이상의 테이블이 서로 연관되어 있는 상태 고려

— inner join
조인 중에서 가장 많이 사용되는 조인
일반적으로 join이라 하면 inner join을 사용한 것
select * from enroll inner join student on enroll.sno = student.sno;  수강테이블과 학생테이블 결합
select sname, stel from enroll inner join student on enroll.sno = student.sno where grade = “A0”;

— outer join
조인의 조건에 만족되지 않는 행까지도 포함
자주 사용되는 것은 아니지만 가끔 유용하게 사용되는 방식
left outer join: 왼쪽 테이블의 것은 모두 출력되어야 한다
right outer join
full outer join
select student.sno, sname, code, grade from student left outer join enroll on enroll.sno = student.sno;

— cross join
한쪽 테이블의 모든 행들과 다른 쪽 테이블의 모든 행을 조인시키는 기능 
cross join의 결과 개수는 두 테이블 개수를 곱한 개수가 된다
이러한 cross join을 “카티션 프로덕트( X )”라고 부른다
차수: 두 차수의 합
카디널리티: 두 카디널리티의 곱
cross join에는 on구문을 사용할 수 없다 - cross join을 하기 위해서는 from절에 단지 콤마로 이름들을 나열한다
select * from student cross join enroll;
select * from student, enroll;

cross join의 용도는 테스트를 위해 주로 사용
실 업무에서 사용은 별로 권장 사항이 아니다
cross join에서 inner join과 같은 결과를 보고 싶으면 where절을 써야 한다
select * from student, enroll where studnet.sno = enroll.sno;



