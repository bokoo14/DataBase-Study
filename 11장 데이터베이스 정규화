# 11장 데이터베이스 정규화

## 1. 잘못 설계된 데이타베이스
같은 학번이 나타날 때마다 학년 애트리뷰트 값도 똑같이 중복적으로 나타남

### 이상(anomaly) 현상
- 삭제 이상 (deletion anomaly)
학번 3654 고영준 학생이 과목 'CO234'의 등록을 취소할 때 -> 4학년이라는 정보도 함께 삭제 됨
연쇄 삭제(triggered deletion)에 의해 정보가 영원히 손실되는 현상

- 삽입 이상 (insertion anomaly)
학번이 7654이고 학년이 3인 학생을 삽입할 때 -> 어떤 과목을 등록하지 않는 한 삽입이 불가능 (학번, 과목코드가 기본 키)
과목 정보가 없는 데도 불구하고 입력할 수 없는 이상 현상이 발생

- 갱신 이상 (update anomaly)
학번 4652인 학생의 학년을 4에서 3으로 변경하려고 할 때 -> 학번 4652에 대한 4개의 투플 모두를 변경해야 함
중복 데이타의 일부만 갱신으로 정보의 모순성(inconsistency)이 발생 

### 이상 현상의 원인과 해결책
- 이유
여러 가지 상이한 정보를 가지고 있는 애트리뷰트들을 무리하게 하나의 릴레이션으로 표현하였기 때문

- 문제 해결 방법
애트리뷰트들 간의 종속성을 분석해서 하나의 릴레이션에는 하나의 종속성만 표현되도록 테이블을 분해하는 것
학번에 대해 성명과 학년이 종속 관계를 나타내고, 학번과 과목코드에 대해 성적이 종속 관계를 나타내고 있다

이러한 종속 관계에 따라 두 개의 릴레이션으로 분해한다면 그 결과는 다음과 같다
이러한 두 개 이상의 릴레이션으로 분해하는 과정을 '정규화'라고 한다

----------------------------------------------------------------------------------
## 2. 함수 종속성
함수 종속의 정의
학생(학번, 성명, 학과, 전화번호)에서 성명, 학과, 전화번호는 학번에 각각 함수 종속(FD: Funtional Dependaency)임
학번이 정해지면 이에 대응하는 성명, 학과, 전화번호의 값은 오직 하나만 있기 때문
기호로 표시: 학번->(성명, 학과, 전화번호)

즉, 함수 종속이란?
어떤 릴레이션 R에서 애트리뷰트 A의 값 각각에 대해 항상 애트리뷰트 B의 값이 오직 하나만 연관되어 있다면, B는 A에 함수 종속된다고 하고, A->B로 표기한다

### 함수 종속 다이어그램 (FD Diagram)
한 릴레이션에서 애트리뷰트들 간의 함수 종속 관계를 쉽게 이해하기 위해 도식으로 표현한 것

### 완전 함수 종속과 부분 함수 종속
등록 릴레이션의 함수 종속 관계는 세 개가 존재
{학번, 과목코드} -> 성적
학번 -> 성명
학번 -> 학년
즉, 성적은 학번, 과목코드에 함수 종속이 되고, 성명과 학년은 학번에 함수 종속이 됨

- '성적'은 {학번, 과목코드}에 완전 함수 종속(full funtional dependaency)되었다고 함
- '성명'과 '학년'은 '학번'에 완전 함수 종속됨
- 그러나 성명과 학년은 {학번, 과목코드}에 부분 함수 종속(partial functional dependency)되었다고 함

### 비정규 릴레이션
기본키: {학번, 과목코드}
학번과 과목코드의 조합으로 학생이 등록한 과목의 성적을 식별할 수 있음
한 학생은 한 사람의 지도교수를 가질 수 있고, 한 학과에만 속함
각 지도교수도 한 학과에만 속함

----------------------------------------------------------------------------------
## 3. 제 1 정규형 (1NF)
릴레이션 R에 속한 모든 도메인이 원자 값만으로 되어 있다면 제 1정규형(1NF)이라 함

### 함수 종속 다이어그램
등록(학번, 성명, 학과, 지도교수, 과목코드, 성적)
기본 키: {학번, 과목코드}
함수 종속: {학번, 과목코드} -> 성적
학번 -> 성명
학번 -> 지도교수
학번 -> 학과
지도교수 -> 학과

### 등록 릴릴레이션에서의 이상 현상
- 삽입 이상
학번 7654학생의 지도교수로 '김용주'리는 사실을 삽입하려 할 때 어떤 과목을 등록하지 않는 한 삽입할 수 없다
(기본키인 과목코드가 NULL값이기 때문)

- 삭제 이상
학번 3654인 학생이 "CO234"과목을 등록 취소할 때, 이 투플이 삭제되는 경우 지도교수 "김재현" 정보까지 삭제됨

- 갱신 이상
학번 4653인 학생의 지도교수를 '이우정'에서 '고현주'로 변경할 때, 학번이 4653인 4개의 투플 모두 변경하지 않고 일부만 변경될 때 문제 발생

### 1NF 이상 현상의 원인
키가 아닌 애트리뷰트들이 기본키에 완전 함수 종속되지 못하고 부분 함수 종속이 되기 때문

### 1NF 이상의 해결
두 개의 릴레이션으로 분할하여 부분 함수 종속을 제거 => 2NF

----------------------------------------------------------------------------------
## 4. 제 2 정규형 (2NF)
### 제 2정규형에서의 이상 현상
- 삽입 이상
지도교수 '강성화'가 컴퓨터과에 속한다는 사실을 삽입할 수 없다 (지도 받는 학생이 없으므로 -> NULL값)

- 삭제 이상
학번 2587인 학생이 지도교수 '김용주'와 지도교수 관계를 취소할 때: 지도교수가 속한 학과 정보까지도 삭제됨

- 갱신 이상
지도교수 '이우정'의 소속을 컴퓨터과에서 전자과로 변경한다면 학번이 1234와 4653인 두 개의 투플을 모두 변경해야 함
그렇지 못하면 데이타 불일치 모순이 발생

### 2NF 이상 현상의 원인
두 개의 상이한 정보를 하나의 릴레이션으로 혼합해서 표현하려고 하는 데서 옴
학과 애트리뷰트는 사실상 지도교수의 학과를 기술하고 있는 것임

A가 기본키라면 A->B와 A->C가 존재함
그런데 C가 A이외에 B에도 함수 종속한다면 C는 A에서 B를 거쳐서 이행적으로도 종속한다
따라서 애트리뷰트 C는 A에 이행적 함수 종속(Transitive FD)이라고 한다

### 2NF 이상의 해결
이행적 함수 종속을 제거하여 두 개의 릴레이션으로 분해 => 3NF

----------------------------------------------------------------------------------
## 5. 제 3 정규형 (3NF)
학번, 성명, 학과, 지도교수를 학번, 성명, 지도교수와 지도교수, 학과로 분해

지도 => 학생지도와 교수학과로 분해
학생 지도 (학번, 성명, 지도교수)
기본 키: {학번}
외래 키: {지도교수} 참조: 교수학과

교수 학과 (지도교수, 학과)
기본 키: {지도교수}

----------------------------------------------------------------------------------
## 6. 보이스/코드(Boyce/Codd) 정규형 (BCNF)
강의과목(학번, 과목, 교수): 제 3 정규형(3NF)이지만 문제점이 있는 예
- 제약 조건
한 학생은 여러 과목을 수강할 수 있다
한 교수는 한 과목만 강의할 수 있다
한 과목은 여러 교수가 강의할 수 있다

기본 키: {학번, 과목}
함수종속: {학번, 과목}->교수
        교수->과목

### 강의과목 릴레이션에서의 이상 현상
- 삽입 이상
교수 '김정희'가 '자료구조'과목을 강의하게 되었을 때 삽입 불가 (기본키인 학번이 NULL)

- 삭제 이상
학번 1234인 학생이 '자료구조'를 취소할 때 '이우정'이 자료구조를 맡고 있는 정보까지도 삭제

- 갱신 이상
교수 '김용주'의 담당과목이 '데이타베이스'에서 '웹프로그래밍'으로 변경되었을 때 모든 투플에 대해 변경되어야 함

### 원인
키가 아닌 애트리뷰트가 다른 애트리뷰트를 결정하기 때문
즉, 교수 애트리뷰트는 후보키가 아닌데 과목을 결정하는 결정자이다

### BCNF
모든 결정자가 후보키가 되도록 분할
강의교수(학번, 교수)
기본 키: {학번, 교수}
외래 키: {교수} 참조: 교수 과목

교수과목(교수, 과목)
기본 키: {교수}

----------------------------------------------------------------------------------
## 7. 제 4 정규형 (4NF)
각 과목은 명시된 교수들 중에서 어떤 교수라도 가르칠 수 있으나, 교재는 기술된 것 전부 사용해야 한다
이 비정규 과목리스트 릴레이션을 동등한 정규 릴레이션으로 변환시키면 [그림 11-14]와 같은 과목리스트 릴레이션으로 표현될 수 있다

### 과목리스트(CPT) 릴레이션
과목 리스트 릴레이션은 모든 애트리뷰트가 키가 되므로 BCNF가 된다
그러나 이 릴레이션은 사실상 교수와 교재가 서로 무관한 것을 한 릴레이션으로 표현하고 있다

### BCNF에서의 이상 현상
- 과목리스트 릴레이션에서의 갱신 이상
교수 고현주가 '자료구조'를 강의한다는 정보를 삽입하려면 3개의 자료구조 교재(즉, 자료구조 기초, 자료구조 실습, 그래프 원리)에 대해 각각 투플 하나씩 3개의 투플을 삽입해야 함
(상당한 데이타 중복 발생)

### BCNF 이상 현상의 원인
과목은 교수나 교재의 값 하나를 결정하는 것이 아니라 몇 개의 값, 즉 값의 집합(set of values)을 결정하기 때문이다
이러한 종속을 다치 종속이라 하고 ->>로 표기한다

과목->>교수
과목->>교재
데이타베이스->{김용주, 박정미}
데이타베이스->{DB이론, MySQL실습}

분해하면 중복 해결

### 제 4 정규형 (다치 종속)
- 다치 종속(MVD: Multivalued Dependency)
릴레이션 R(A, B, C)에서 어떤 {A, C}값에 대응되는 B의 집합이 A값에만 종속되고 C값에는 독립적이면, "B는 A에 다치 종속된다"라고 하고 A->>B로 표기한다
A multi-determines B
A double arrow B
B is multi-dependent on A

- A->>B이면 A->>C도 성립
과목리스트 릴레이션에서 과목->>교수가 성립하기 때문에 과목->>교재가 성립됨
이렇게 MVD는 항상 쌍으로 존재하므로 A->>B|C로 한꺼번에 표현할 수 있다

----------------------------------------------------------------------------------
## 8. 제 5 정규형 (5NF)
지금까지 문제가 발생하는 릴레이션은 두 개의 릴레이션으로 분해
그러나 어떤 릴레이션은 2개가 아니라 3개 또는 그 이상의 릴레이션으로 분해(즉, n-분해 릴레이션)해야 하는 경우

- 납품 관리 릴레이션: 어떤 공급자가 어떤 부품을 어떤 작업장에 공급하고 있다는 것을 표현

### 조인 종속 (JD: Join Dependency)
어떤 릴레이션 R에 대해 프로젝트한 n개의 부분 집합 (A, B, ...Z)이 있다고 하자
이때 만일 이 릴레이션 R이 그의 (A, B, ..., Z)를 모두 조인한 결과와 똑같이 된다면 R은 조인종속(JD)*(A, B, ... ,Z)을 만족시킨다고 한다

납품 관리 릴레이션은 JD*(공급부품, 부품작업, 작업공급)을 만족하고 있으므로 3-분해 릴레이션이다
즉, JD를 만족하는 3-분해 릴레이션은 3개의 프로젝트로 분해해야 함
별다른 이점 없음

----------------------------------------------------------------------------------
## 5NF까지의 정규형 과정
비정규 릴레이션 
-> 모든 도메인이 원자 값이 되도록 수정 -> 1NF 
-> 부분 함수 종속을 제거 -> 2NF 
-> 이행 함수 종속을 제거 -> 3NF 
-> 모든 결정자가 후보 키가 되도록 분해
-> BCNF -> 다치 종속(MVD)를 갖지 않은 테이블로 분해 -> 4NF 
-> 조인 종속(JD)을 만족하는 n-분해 릴레이션으로 분해 -> 5NF

----------------------------------------------------------------------------------
## [정리]
### 잘못 설계된 데이터베이스
삭제 이상, 삽입 이상, 갱신 이상
이유: 상이한 정보 무리하게 하나의 릴레이션으로 표현
문제 해결 방법: 하나의 릴레이션에는 하나의 종속성만 표현되도록 테이블 분해
정규화: 두 개이상의 릴레이션으로 분해하는 과정

### 함수의 종속성
A->B: 애트리뷰트 A의 값 각각에 대해 항상 애트리뷰트 B의 값이 오직 하나만 연관

### 함수 종속 다이어그램
애트리뷰트들 간의 함수 종속 관계를 도식으로 표현

### 완전 함수 종속
기본키: 학번, 과목코드
{학번, 과목코드}->성적
학번->성명
학번->학년
일 때
성적은 완전 함수 종속

### 부분 함수 종속
{학번, 과목코드}->성명은 부분 함수 종속

### 제 1 정규형
모든 도메인이 원자 값만으로 구성
삽입 이상, 삭제 이상, 갱신 이상
이상 현상 원인: 기본키에 완전 함수 종속되지 못하고 부분 함수 종속
해결: 부분 함수 종속을 제거

### 제 2 정규형
삽입 이상, 삭제 이상, 갱신 이상
이상 현상 원인: 두 개의 상이한 정보를 하나의 릴레이션으로 혼합해서 표현, 이행적 함수 종속(Transitive FD)
해결: 이행적 함수 종속을 제거

### 제 3 정규형
이행적 함수 종속을 제거한 결과
삽입 이상, 삭제 이상, 갱신 이상
이상 현상 원인: 후보키가 아닌데 과목을 결정하는 결정자
해결: 모든 결정자가 후보키가 되도록 분할

### 보이스/코드(Boyce/Codd) 정규형
3NF이지만 문제점이 있는 예? 교수 애트뷰트는 후보키가 아닌데 과목을 결정하는 결정자(determinant)
BCNF: 모든 결정자가 후보키가 되도록 분할
갱신 이상 (상당한 데이타 중복 발생)
이상 현상 원인: 값의 집합을 결정(set of values) 다치종속(->>)

### 다치 속성(MVD, multivalued dependency)
릴레이션 R(A, B, C)에서 어떤 {A, C}값에 대응되는 B의 집합이 A값에만 종속되고 C값에는 독립적
B는 A에 다치 종속된다
A->>B
A->>B이면 A->>C도 성립
A->>B|C

### 제 4 정규형
다치 속성(MVD)을 갖지 않는 테이블

### 제 5 정규형
3개 또는 그 이상의 릴레이션으로 분해
조인 종속(JD)을 만족하는 n-분해 릴레이션으로 분해
별다른 이점 없음

### 조인 종속(JD, join dependency)
프로젝트한 n개의 부분 집합 모두 조인한 결과와 똑같이 된다면 조인 종속을 만족시킨다

----------------------------------------------------------------------------------
## [실습2]
### Stored Procedure의 개요
SQL문의 집합(이름이 있음)
반복되는 작업을 효과적으로 실행
2가지 형태: 시스템, 사용자 정의 프로시저
입력 매개변수를 받고, 값을 리턴(return)한다
성공, 실패를 나타내는 상태 값을 리턴한다

use academicDB;
drop procedure if exists studentProc;
delimiter $$ 
create procedure studentProc()
begin
select * from student;
end $$
delimiter ;
call studentProc();

### 저장 프로시저의 초기 프로세싱

### 저장 프로시저의 장점
어플리케이션 로직 공유 (일관성 보장)
데이터베이스 스키마의 자세한 사항이 노출되지 않도록 보호 (직접 테이블이 접근할 필요 없음)
보안 메커니즘 제공 (프로시저: 허용, 테이블: 불허)
성능 향상
네트웍 트래픽 감소 (다수의 SQL문장 vs 단일 프로시저)

### 저장 프로시저 생성 시 지침
만들 때 dbo를 명시한다(소유자에 대한 혼란 방지)
한 작업에 대한 하나의 저장 프로시저 설계
서버에서 생성, 테스트, 디버그한다
클라이언트에서는 사용
이름에 sp_접두사는 피한다
임시 저장 프로시저 사용을 최소화 한다


