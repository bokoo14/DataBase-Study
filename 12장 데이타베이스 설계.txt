# 12장 데이타베이스 설계

## 1. 설계 개요
데이타베이스 개발 생명 주기(life cycle)
요구사항 분석 -> 설계 -> 구현 -> 운영 -> 감시 및 개선

### 데이타베이스 설계 단계
요구사항 분석을 기초로 데이터베이스 구조를 작성하는 과정
문제가 발생하면 피드백을 받아 적절한 단계로 되돌아가 다시 시작

- 요구사항 분석: 요구사항을 수집/분석하여 요구사항 명세서 작성

- 설계
  - 개념적 설계: 개념적 스키마 모델링과 트랜잭션 모델링 병행 수행
  - 논리적 설계: 목표 DBMS가 처리 가능한 논리적 데이터 스키마 생성
  - 물리적 설계: 효율적이고 구현 가능한 물리적 데이터 구조 생성

- 구현: DDL을 컴파일하고 실행 변환 유틸리티 활용

### 데이타베이스 설계 시 고려사항 (6)
- 무결성(integrity): 변경 연산 후에도 제약 조건 만족
- 일관성(consistency): 데이타 간, 응답 간의 일치
- 회복(recovery): 장애 발생 시 일관된 상태로 복구
- 보안(security): 불법 접근의 방지
- 효율성(efficiency): 응답시간/저장 공간 최소화, 생산성 향상
- 확장성(extensibility): 운영에 지장없이 새로운 데이타의 계속적 추가

----------------------------------------------------------------------------------
## 2. 요구사항 분석 (requirements analysis)
사용자의 요구사항을 수집하고 분석하여 공식적인 요구사항 명세서(specification)를 작성하는 것

1. 개체, 애트리뷰트, 관계성, 제약조건 등과 같은 정적 정보 구조에 대한 요구사항
2. 트랜잭션 유형, 트랜잭션 실행 빈도와 같은 동적 DB처리 요구사항
3. 회사의 경영 목표 및 정책, 그리고 규정과 같은 범기관적 제약조건 등이 산출되어야 한다

### 요구사항 분석 과정
- 일반 사항 분석
- 업무와 관련된 문서들을 수집
- 회사의 경영 목표 및 제약조건 파악
- 모아진 문서와 자료 등을 분류하고 정리
- 공식적 요구사항 명세서(requirement specification) 작성
- 요구사항 명세서 담당자들과 확인 회의를 거침

### 문서들을 체계적으로 정리
많은 분량의 문서들을 정리하여 DB설계 준비
소프트웨어 공학 기법들이 사용될 수 있음
HIPO, SADT, DFD, Orr-Warnier다이어그램, Nassi-Schneiderman다이어그램
DFD(data flow diagram): 약속된 표기법에 따라 작성됨

----------------------------------------------------------------------------------
## 3. 개념적 설계 (conceptual design)
개념적 스키마 모델링과 트랜잭션 모델링을 병행적으로 수행

### 개념적 스키마 모델링 (conceptual schema modeling)
- E-R다이어그램 사용
- 요구사항 분석 결과로 나온 명세서를 E-R다이어그램과 같은 개념적 데이타 모델로 기술
- 이러한 과정을 개념적 데이터 모델링 (conceptual data modeling)
- 표현된 결과를 개념적 데이터 구조 (conceptual data structure), 개념적 데이터 스키마 (conceptual data schema)
- 스키마 구성 요소: 개체, 속성, 관계

### 개념적 스키마를 유도하는 기본 원리
- 추상화: 현실 세계를 단순화, 개념화시켜 표현
- 집단화: 하위 클래스 몇 개의 속성을 묶어서 하나의 새로운 개체를 생성 예)엔진, 기어, 바퀴 -> 자동차
- 일반화: 하위 레벨의 공통적인 특성을 파악하여 상위 레벨의 개체를 생성 예)승용차, 트럭, 버스 -> 자동차

### 트랜잭션 모델링
- 처리 중심 설계: 응용을 위한 데이터 처리에 중점
주요 트랜잭션들을 식별하고 이들에 대한 기능적 특성을 DB 설계 단계 초기에 명세해 놓은 것
스키마에 트랜잭션이 필요로 하는 정보가 모두 포함되어 있는지 확인할 수 있음
트랜잭션 사이의 상대적 중요성과 예상 실행 빈도수를 파악해서 물리적 DB설계할 때 중요 정보로 사용됨

- I/O와 기능적 행태만 주로 정의
입력 데이타, 출력 데이타, 내부적인 제어 흐름을 기술

- 트랜잭션의 유형: 검색, 갱신, 혼합(검색&갱신)

----------------------------------------------------------------------------------
## 4. 논리적 설계 (logical design)
개념적 설계에서 생성된 개념적 데이터 스키마로부터 목표 DBMS가 처리할 수 있는 스키마를 생성하는 것
이 스카마는 요구사항 명세서 만족, 무결성, 일관성, 제약조건 만족

3단계를 거처 수행
1. 논리적 데이타 모델로 변환
2. 트랜잭션 인터페이스 설계
3. 스키마의 평가 및 정제

### [1단계] 논리적 데이타 모델로 변환
개념적 데이터 스키마를 목표 DBMS에 맞는 스키마(논리적 데이터 모델)로 변환
이 변환 과정을 논리적 데이터 모델링이라 함
데이터 모델에는 관계형, 계층, 네트워크, 객체 지향, 객체-관계형 모델들을 모두 포함

이 단계의 결과: 목표 DBMS의 DDL로 기술된 스키마
이 DDL에는 물리적 설계 단계에서 결정해야 될 매개변수들이 포함될 수 있으므로 완전한 스키마 정의는 물리적 설계 단계까지 보류

### [2단계] 트랜잭션 인터페이스 설계
트랜잭션의 전체적 골격(skeleton) 개발
인터페이스 정의
트랜잭션에 대한 데이타 접근 방법을 기술

### [3단계] 스키마의 평가 및 정제
성능 평가는 정량적 정보와 성능 평가 기준에 따라 수행
정량적 정보: 데이타의 크기, 처리 빈도수, 처리 작업량 등
성능평가 기준: 논리적 레코드의 접근, 데이타 전송량, DB의 크기 등

필요한 경우 인덱스나 해싱 기법 등을 사용하여 성능 개선시킴

### 관계 데이타 모델로의 변환 예
사각형 - 개체 릴레이션
다이아몬드 - 관계 릴레이션

### 관계 릴레이션의 다른 변환 예
독립된 릴레이션으로 관계를 표현하지 않고
두 릴레이션에 공통되는 애트리뷰트(키)를 공통으로 갖게 함으로써 묵시적으로 관계를 나타낼 수도 있다

어떤 방법을 선택? 설계자의 선택사항
고려 사항: 데이터 중복과 데이터 처리의 효율성
1:n인 경우 -> n쪽의 릴레이션에 키를 첨가시키는 것이 효율적
1에 첨가? 데이터 중복이 크게 생긴다
n에 첨가? 데이터 중복이 크게 생기지 않는다

----------------------------------------------------------------------------------
## 5. 물리적 설계 (physical design)
논리적 데이터 스키마로부터 효율적인 내부 스키마를 설계하는 것
성능에 중대한 영향을 미치므로 효율성이 강조됨
트랜잭션의 상세 설계도 병행하여 수행됨

물리적 데이터 구조의 기본적인 데이타 단위는 저장 레코드(stored record)
하나의 파일(file): 한 타입의 저장 레코드들의 집합

물리적 설계에는 다음과 같은 설계들이 포함
- 저장 레코드 양식 설계(stored record format design)
- 레코드 집중화(record clustering)
- 접근 경로(access path)
- 저장 공간 할당(storeage space allocation)

### 저장 레코드 양식
- 저장 레코드 양식 설계 시 고려 사항
데이타 타입
데이타 값의 분포
사용될 응용
접근 빈도

저장 레코드에 대한 데이타 표현(data representation)과 압축(compression)에 관한 정보도 포함
접근 빈도수에 따라 그룹을 달리하여 물리적으로 상이하게 저장하는 것도 포함

### 레코드 집중화
논리적으로 관련이 깊은 레코드들을 물리적으로 근접하도록 저장하여 물리적 순차성을 지원
연속된 레코드의 검색을 요구할 때 빠른 접근 가능

블록 크기의 선정
- 순차 처리(sequential processing): 큰 블록
- 임의 접근 처리(random processing): 작은 블록

### 접근 경로
저장된 데이터의 검색과 저장을 가능하게 함
저장 구조: 주로 인덱스를 통한 접근 방법과 데이터 파일을 정의
탐색 기법: 주어진 응용을 위한 적절한 접근 경로를 정의

기본 접근 경로와 보조 접근 경로로 나뉨
- 기본 접근 경로: 기본키를 기본으로 한 기본 인덱스를 이용
  초기 레코드 적재, 레코드의 물리적 위치, 기본키를 통한 검색
  주요 응용들이 기본 접근 경로를 이용해서 처리되도록 설계
- 보조 접근 경로: 보조키에 기반을 둔 보조 인덱스를 통해 저장 레코드를 접근
  접근 시간은 줄일 수 있으나 저장 공간을 추가로 사용하고, 인덱스 관리가 복잡해짐

상용 DBMS는 성능 향상을 위해 여러 가지 tool을 지원
인덱싱 기법, 레코드 집중화, 포인터, 해싱 등이 포함

- 물리적 데이터 구조 설계 시 고려 사항 (3)
트랜잭션 응답 시간
저장공간의 효율화
트랜잭션 처리도(throughput): 단위 시간에 DBMS가 처리할 수 있는 평균 트랜잭션 수

물리적 설계의 평가를 위해 시뮬레이션이나 프로토타입과 같은 기법을 많이 사용함
DBMS는 성능 평가를 위헤 system catalog에 통계 데이타를 저장
트랜잭션 발생 수, 입출력 연산, 페이지나 인덱스 수, 인덱스 사용 빈도에 대한 정보가 저장됨

----------------------------------------------------------------------------------
## 6. 구현
목표 DBMS의 DDL로 기술된 명령문이 컴파일되고 실행됨
데이타베이스 스키마와 빈 데이타베이스 파일을 생성
DB에 데이터를 적재(loading)시킴
만일 기존 화일이 있다면 변환 유틸리티를 사용
DB의 트랜잭션은 응용 프로그래머에 의해 구현됨
DB설계 및 구현이 끝나면 DB운영 단계로 넘어감

----------------------------------------------------------------------------------
## 전체적인 DB설계 과정
사용자의 요구사항 -> 요규사항 분석 -> 요구사항 명세서 
-> 개념적 설계 -> 개념적 데이타 스키마 -> (DBMS특성) 
-> 논리적 설계 -> 논리적 데이터 스키마 -> (HW/OS 특성) 
-> 물리적 설계 -> 물리적 데이터 구조 -> 구현 -> 데이터베이스 운영

